{
	"version": 3,
	"file": "C:/Users/elong/AdHoc/bluepea/src/bluepea/static/pylib/__javascript__/pylib.inspector.mod.js",
	"sources": [
		"C:/Users/elong/AdHoc/bluepea/src/bluepea/static/pylib/inspector.py"
	],
	"sourcesContent": [
		"\"\"\"\nInspector page, used for viewing objects in the database.\n\"\"\"\nfrom .pylib import server\n\n\nclass Tab:\n    \"\"\"\n    Base class of tabs, including the menu link and the displayed tab itself.\n    \"\"\"\n    Name = \"\"\n    \"\"\"Friendly name to be displayed in the menu.\"\"\"\n    Data_tab = \"\"\n    \"\"\"Tab identifier, used as html attribute 'data-tab'.\"\"\"\n    Active = False\n    \"\"\"True if this Tab should be displayed on startup.\"\"\"\n\n    def __init__(self):\n        self._menu_attrs = {\"data-tab\": self.Data_tab}\n        self._tab_attrs = {\"data-tab\": self.Data_tab}\n        self._menu = \"a.item\"\n        self._tab = \"div.ui.bottom.attached.tab.segment.no-border.below-tabs\"\n\n        if self.Active:\n            self._menu += \".active\"\n            self._tab += \".active\"\n\n    def menu_item(self):\n        \"\"\"\n        Returns a vnode <a> item, for use in the tab menu.\n        \"\"\"\n        return m(self._menu, self._menu_attrs, self.Name)\n\n    def tab_item(self):\n        \"\"\"\n        Returns a vnode tab wrapper around the contents of the tab itself.\n        \"\"\"\n        return m(self._tab, self._tab_attrs, self.main_view())\n\n    def main_view(self):\n        \"\"\"\n        Returns the vnode of the actual tab contents.\n        \"\"\"\n        return m(\"div\", \"hello \" + self.Name)\n\n\nclass TabledTab(Tab):\n    \"\"\"\n    Base class for tabs in the Inspector interface, using a table and \"details\" view.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self.table = None\n        self.setup_table()\n        self.copiedDetails = \"\"\n        self._detailsId = self.Data_tab + \"DetailsCodeBlock\"\n        self._copiedId = self.Data_tab + \"CopiedCodeBlock\"\n        self._copyButtonId = self.Data_tab + \"CopyButton\"\n        self._clearButtonId = self.Data_tab + \"ClearButton\"\n\n    def setup_table(self):\n        \"\"\"\n        Called on startup for the purpose of creating the Table object.\n        \"\"\"\n        self.table = Table([])\n\n    def _copyDetails(self):\n        self.copiedDetails = self.table.detailSelected\n\n    def _getRows(self):\n        return jQuery(\"[data-tab='{0}'].tab table > tbody > tr\".format(self.Data_tab))\n\n    def _getLabel(self):\n        return jQuery(\".menu a[data-tab='{0}'] .ui.label\".format(self.Data_tab))\n\n    def _clearCopy(self):\n        self.copiedDetails = \"\"\n\n    def menu_item(self):\n        return m(self._menu, self._menu_attrs,\n                 m(\"div\", self.Name),\n                 m(\"div.ui.label.small\", \"{0}/{1}\".format(self.table.shown, self.table.total))\n                 )\n\n    def main_view(self):\n        return m(\"div.fill-container.small-padding\",\n                 # Table needs to be in a special container to handle scrolling/sticky table header\n                 m(\"div.table-container\", m(self.table.view)),\n                 m(\"div.card-container\",\n                   m(\"div.ui.two.cards.fill-container\",\n                     m(\"div.ui.card\",\n                       m(\"div.content.small-header\",\n                         m(\"div.header\",\n                           m(\"span\", \"Details\"),\n                           m(\"span.ui.mini.right.floated.button\", {\"onclick\": self._copyDetails, \"id\": self._copyButtonId},\n                             \"Copy\")\n                           )\n                         ),\n                       m(\"pre.content.code-block\", {\"id\": self._detailsId},\n                         self.table.detailSelected\n                         )\n                       ),\n                     m(\"div.ui.card\",\n                       m(\"div.content.small-header\",\n                         m(\"div.header\",\n                           m(\"span\", \"Copied\"),\n                           m(\"span.ui.mini.right.floated.button\", {\"onclick\": self._clearCopy, \"id\": self._clearButtonId},\n                             \"Clear\")\n                           )\n                         ),\n                       m(\"pre.content.code-block\", {\"id\": self._copiedId},\n                         self.copiedDetails\n                         )\n                       )\n                     )\n                   )\n                 )\n\n\nclass Field:\n    \"\"\"\n    A field/column of a table.\n\n    Attributes:\n        title (str): Friendly table header name\n        name (str): JSON key to use in data lookup by default\n    \"\"\"\n    Title = None\n    \"\"\"Friendly name to display in table header.\"\"\"\n    Length = 4\n    \"\"\"Length of string to display before truncating with ellipses\"\"\"\n\n    __pragma__(\"kwargs\")\n    def __init__(self, title=None, length=None):\n        self.title = self.Title\n        if title is not None:\n            self.title = title\n\n        # Cannot assign \"length\" to object\n        self.mlength = self.Length\n        if length is not None:\n            self.mlength = length\n\n        self.name = self.title.lower()\n    __pragma__(\"nokwargs\")\n\n    def format(self, data):\n        \"\"\"\n        Formats the data to a string matching the expected view for this field.\n        \"\"\"\n        return str(data)\n\n    def shorten(self, string):\n        \"\"\"\n        Shortens the string to an appropriate length for display.\n        \"\"\"\n        return string\n\n    def view(self, data):\n        \"\"\"\n        Returns a vnode <td> suitable for display in a table.\n        \"\"\"\n        if data == None:\n            # Better to have empty data than to cause an error\n            data = \"\"\n        formatted = self.format(data)\n        return m(\"td\", {\"title\": formatted}, self.shorten(formatted))\n\n\nclass FillField(Field):\n    \"\"\"\n    Field that should \"use remaining space\" for display.\n    \"\"\"\n    Length = 100\n\n    def view(self, data):\n        node = super().view(data)\n        node.attrs[\"class\"] = \"fill-space\"\n        return node\n\nclass DateField(Field):\n    \"\"\"\n    Field for displaying dates.\n    \"\"\"\n    Length = 12\n    Title = \"Date\"\n\nclass EpochField(DateField):\n    \"\"\"\n    Field for displaying time since the epoch.\n    \"\"\"\n    def format(self, data):\n        # Make format match that of other typical dates from server\n        data = __new__(Date(data / 1000)).toISOString()\n        return super().format(data)\n\n\nclass IDField(Field):\n    \"\"\"\n    Field for displaying ids.\n    \"\"\"\n    Length = 4\n    Title = \"UID\"\n    Header = \"\"\n    \"\"\"Stripped from beginning of string for displaying.\"\"\"\n\n    def format(self, string):\n        if string.startswith(self.Header):\n            string = string[len(self.Header):]\n        return super().format(string)\n\nclass DIDField(IDField):\n    Header = \"did:igo:\"\n    Title = \"DID\"\n\nclass HIDField(IDField):\n    Header = \"hid:\"\n    Title = \"HID\"\n\n    # def shorten(self, string):\n    #     if len(string) > 13:\n    #         string = string[:6] + \"...\" + string[-4:]\n    #     return string\n\nclass OIDField(IDField):\n    Header = \"o_\"\n    Title = \"UID\"\n\nclass MIDField(IDField):\n    Header = \"m_\"\n    Title = \"UID\"\n\n\nclass Table:\n    \"\"\"\n    A table, its headers, and its data to be displayed.\n\n    Attributes:\n        max_size (int): maximum number of entries to display\n        total (int): number of entries in our data\n        shown (int): number of entries not hidden by filter or max_size limit\n    \"\"\"\n    no_results_text = \"No results found.\"\n\n    def __init__(self, fields):\n        self.max_size = 1000\n        self.fields = fields\n        self.data = []\n        self._shownData = []\n        self.view = {\n            # \"oninit\": self.refresh,\n            \"view\": self._view\n        }\n\n        self._selected = None\n        self.detailSelected = \"\"\n\n        self.filter = None\n        self.sortField = None\n        self.reversed = False\n\n        self.total = 0\n        self.shown = 0\n\n    def _stringify(self, obj):\n        \"\"\"\n        Converts the provided json-like object to a user-friendly string.\n        \"\"\"\n        def replacer(key, value):\n            # Hide any keys starting with underscore\n            if key.startswith(\"_\"):\n                return\n            return value\n        return JSON.stringify(obj, replacer, 2)\n\n    def _limitText(self):\n        return \"Limited to {} results.\".format(self.max_size)\n\n    def _selectRow(self, event, obj):\n        \"\"\"\n        Deselects any previously selected row and\n        selects the row specified in the event.\n        \"\"\"\n        if self._selected is not None:\n            # Deselect the last-selected object\n            del self._selected._selected\n\n            if self._selected._uid == obj._uid:\n                # Remove the current selection and don't set another\n                self._selected = None\n                self.detailSelected = \"\"\n                return\n\n        # Select the new object\n        self._selected = obj\n        obj._selected = True\n        self.detailSelected = self._stringify(obj)\n\n    def refresh(self):\n        \"\"\"\n        Refreshes any data from the server and returns a promise which resolves\n        when finished.\n        \"\"\"\n        self._setData([])\n        p = __new__(Promise(lambda resolve: resolve()))\n        return Promise\n\n    def clear(self):\n        \"\"\"\n        Removes memory of all current data.\n        \"\"\"\n        self.total = 0\n        server.clearArray(self.data)\n\n    def _makeDummyData(self, count):\n        data = []\n        for i in range(count):\n            obj = {}\n            for field in self.fields:\n                obj[field.name] = \"test{0} {1}\".format(i, field.name)\n            data.append(obj)\n        return data\n\n    __pragma__(\"kwargs\")\n    def _setData(self, data, clear=True):\n        \"\"\"\n        Clears existing data and uses the provided data instead.\n        Adds a \"_uid\" field to each piece of data, for tracking internally.\n        \"\"\"\n        if clear:\n            self.clear()\n        for datum in data:\n            datum._uid = self.total\n            self.data.append(datum)\n            self.total += 1\n        self._processData()\n    __pragma__(\"nokwargs\")\n\n    def setFilter(self, func):\n        if func != self.filter:\n            self.filter = func\n            self._processData()\n\n    def setSort(self, field):\n        \"\"\"\n        Sets our sort to be on the given field.\n        If this is the same as our currently-sorting field, then reverses the sort\n        on that same field.\n        \"\"\"\n        if self.sortField == field:\n            self.reversed = not self.reversed\n        else:\n            self.reversed = False\n            self.sortField = field\n\n        self._sortData()\n\n    def _sortData(self):\n        if self.sortField is None:\n            return\n\n        self._shownData.sort(key=lambda obj: self._getField(obj, self.sortField), reverse=self.reversed)\n\n    def _processData(self):\n        \"\"\"\n        Processes our data, determining which items to show and putting them into\n        a list that is sorted if necessary.\n        \"\"\"\n        server.clearArray(self._shownData)\n\n        self.shown = 0\n        for obj in self.data:\n            if self.shown >= self.max_size:\n                break\n            if self.filter is not None:\n                if not self.filter(obj):\n                    continue\n\n            self._shownData.append(obj)\n            self.shown += 1\n\n        self._sortData()\n\n    def _getField(self, obj, field):\n        \"\"\"\n        Gets the info from the object matching the given field.\n        \"\"\"\n        return obj[field.name]\n\n    def _makeRow(self, obj):\n        \"\"\"\n        Called on each item in self.data.\n        Returns an array of <td> vnodes representing a row.\n        \"\"\"\n        return [field.view(self._getField(obj, field)) for field in self.fields]\n\n    def _view(self):\n        # Create the headers\n        headers = []\n        for field in self.fields:\n            def makeScope(f):\n                return lambda event: self.setSort(f)\n            if field == self.sortField:\n                if self.reversed:\n                    icon = m(\"i.arrow.down.icon\")\n                else:\n                    icon = m(\"i.arrow.up.icon\")\n                header = m(\"th.ui.right.labeled.icon\", {\"onclick\": makeScope(field)},\n                           icon,\n                           field.title)\n            else:\n                header = m(\"th\", {\"onclick\": makeScope(field)}, field.title)\n\n            headers.append(header)\n\n        # Create the rows\n        rows = []\n        for obj in self._shownData:\n            row = self._makeRow(obj)\n\n            # Needed so we can pass through the object as-is to the lambda, without it changing through the loop\n            def makeScope(o):\n                return lambda event: self._selectRow(event, o)\n            if obj._selected:\n                rows.append(m(\"tr.active\", {\"onclick\": makeScope(obj)}, row))\n            else:\n                rows.append(m(\"tr\", {\"onclick\": makeScope(obj)}, row))\n\n        if self.shown >= self.max_size:\n            rows.append(m(\"tr\", m(\"td\", self._limitText())))\n\n        if not self.shown:\n            rows.append(m(\"tr\", m(\"td\", self.no_results_text)))\n\n        return m(\"table\", {\"class\": \"ui selectable celled unstackable single line left aligned table\"},\n                 m(\"thead\",\n                   m(\"tr\", {\"class\": \"center aligned\"}, headers)\n                   ),\n                 m(\"tbody\",\n                   rows\n                   )\n                 )\n\n\nclass AnonMsgsTable(Table):\n    def __init__(self):\n        fields = [\n            IDField(\"UID\"),\n            DateField(),\n            EpochField(\"Created\"),\n            EpochField(\"Expire\"),\n            FillField(\"Content\")\n        ]\n        super().__init__(fields)\n\n    def refresh(self):\n        self.clear()\n        msgs = server.manager.anonMsgs\n        return msgs.refresh().then(lambda: self._setData(msgs.messages))\n\n    def _getField(self, obj, field):\n        if field.name == \"uid\":\n            return obj.anon.uid\n        elif field.name == \"date\":\n            return obj.anon.date\n        elif field.name == \"content\":\n            return obj.anon.content\n        elif field.name == \"created\":\n            return obj.create\n        return obj[field.name]\n\n\nclass IssuantsTable(Table):\n    def __init__(self):\n        fields = [\n            DIDField(),\n            Field(\"Kind\"),\n            FillField(\"Issuer\"),\n            DateField(\"Registered\"),\n            FillField(\"URL\")\n        ]\n        super().__init__(fields)\n\n    def refresh(self):\n        self.clear()\n        entities = server.manager.entities\n        return entities.refreshIssuants().then(lambda: self._setData(entities.issuants))\n\n    def _getField(self, obj, field):\n        if field.name == \"url\":\n            return obj.validationURL\n        return obj[field.name]\n\n\nclass OffersTable(Table):\n    def __init__(self):\n        fields = [\n            OIDField(\"UID\"),\n            DIDField(\"Thing\"),\n            DIDField(\"Aspirant\"),\n            Field(\"Duration\", length=5),\n            DateField(\"Expiration\"),\n            DIDField(\"Signer\"),\n            DIDField(\"Offerer\")\n        ]\n        super().__init__(fields)\n\n    def refresh(self):\n        self.clear()\n        entities = server.manager.entities\n        return entities.refreshOffers().then(lambda: self._setData(entities.offers))\n\n\nclass MessagesTable(Table):\n    def __init__(self):\n        fields = [\n            MIDField(\"UID\"),\n            Field(\"Kind\", length=8),\n            DateField(),\n            DIDField(\"To\"),\n            DIDField(\"From\"),\n            DIDField(\"Thing\"),\n            Field(\"Subject\", length=10),\n            FillField(\"Content\")\n        ]\n        super().__init__(fields)\n\n    def refresh(self):\n        self.clear()\n        entities = server.manager.entities\n        return entities.refreshMessages().then(lambda: self._setData(entities.messages))\n\n\nclass EntitiesTable(Table):\n    def __init__(self):\n        fields = [\n            DIDField(),\n            HIDField(),\n            DIDField(\"Signer\"),\n            DateField(\"Changed\"),\n            Field(\"Issuants\"),\n            FillField(\"Data\"),\n            Field(\"Keys\")\n        ]\n        super().__init__(fields)\n\n    def refresh(self):\n        self.clear()\n        entities = server.manager.entities\n        p1 = entities.refreshAgents().then(lambda: self._setData(entities.agents, clear=False))\n        p2 = entities.refreshThings().then(lambda: self._setData(entities.things, clear=False))\n        return Promise.all([p1, p2])\n\n    def _getField(self, obj, field):\n        if field.name == \"issuants\":\n            issuants = obj[field.name]\n            # If any issuants provided, just show count\n            if issuants:\n                return len(issuants)\n            else:\n                return \"\"\n        elif field.name == \"keys\":\n            keys = obj[field.name]\n            # If an keys provided, just show count\n            if keys:\n                return len(keys)\n            else:\n                return \"\"\n        elif field.name == \"data\":\n            d = obj[field.name]\n            if d and d.keywords and d.message:\n                data = \" \".join(d.keywords)\n                return data + \" \" + d.message\n            else:\n                return \"\"\n        return obj[field.name]\n\n\nclass Entities(TabledTab):\n    Name = \"Entities\"\n    Data_tab = \"entities\"\n    Active = True\n\n    def setup_table(self):\n        self.table = EntitiesTable()\n\n\nclass Issuants(TabledTab):\n    Name = \"Issuants\"\n    Data_tab = \"issuants\"\n\n    def setup_table(self):\n        self.table = IssuantsTable()\n\n\nclass Offers(TabledTab):\n    Name = \"Offers\"\n    Data_tab = \"offers\"\n\n    def setup_table(self):\n        self.table = OffersTable()\n\n\nclass Messages(TabledTab):\n    Name = \"Messages\"\n    Data_tab = \"messages\"\n\n    def setup_table(self):\n        self.table = MessagesTable()\n\n\nclass AnonMsgs(TabledTab):\n    Name = \"Anon Msgs\"\n    Data_tab = \"anonmsgs\"\n\n    def setup_table(self):\n        self.table = AnonMsgsTable()\n\n\nclass Searcher:\n    \"\"\"\n    Methods for searching for a certain string in any dict object.\n\n    Attributes:\n        searchTerm (str): current string to search for\n        caseSensitive (bool): if True, searches are case sensitive\n    \"\"\"\n    def __init__(self):\n        self.searchTerm = None\n        self.caseSensitive = False\n\n    def setSearch(self, term):\n        \"\"\"\n        Sets our search term.\n        If term is surrounded by quotes, removes them and makes the search\n        case sensitive. Otherwise, the search is not case sensitive.\n\n        Args:\n            term (str): base string to search for\n        \"\"\"\n        self.searchTerm = term or \"\"\n        self.caseSensitive = self.searchTerm.startswith('\"') and self.searchTerm.endswith('\"')\n        if self.caseSensitive:\n            # Remove surrounding quotes\n            self.searchTerm = self.searchTerm[1:-1]\n        else:\n            self.searchTerm = self.searchTerm.lower()\n\n    def _checkPrimitive(self, item):\n        \"\"\"\n        Checks for .searchTerm in the provided string.\n        \"\"\"\n        if isinstance(item, str):\n            if not self.caseSensitive:\n                item = item.lower()\n            return self.searchTerm in item\n        return False\n\n    def _checkAny(self, value):\n        \"\"\"\n        Checks for .searchTerm in any provided dict, list, or primitive type\n        \"\"\"\n        if isinstance(value, dict) or isinstance(value, Object):\n            return self.search(value)\n        elif isinstance(value, list):\n            for item in value:\n                if self._checkAny(item):\n                    return True\n            return False\n        else:\n            return self._checkPrimitive(value)\n\n    def search(self, obj: dict):\n        \"\"\"\n        Returns True if obj recursively contains the .searchTerm string in any field.\n        \"\"\"\n        __pragma__(\"jsiter\")\n        for key in obj:\n            if key.startswith(\"_\"):\n                # Skip any \"private\" keys\n                continue\n\n            value = obj[key]\n            if self._checkAny(value):\n                return True\n        return False\n        __pragma__(\"nojsiter\")\n\n\nclass Tabs:\n    \"\"\"\n    Manages the displayed tabs.\n    \"\"\"\n    def __init__(self):\n        self.tabs = [Entities(), Issuants(), Offers(), Messages(), AnonMsgs()]\n        self._searchId = \"inspectorSearchId\"\n        self.searcher = Searcher()\n\n        self._refreshing = False\n        self._refreshPromise = None\n\n        # Required to activate tab functionality (so clicking a menu item will activate that tab)\n        jQuery(document).ready(lambda: jQuery('.menu > a.item').tab())\n\n        self.refresh()\n\n    def refresh(self):\n        \"\"\"\n        Retrieves server data and populates our tabs and tables.\n        \"\"\"\n        if self._refreshing:\n            return self._refreshPromise\n        self._refreshing = True\n\n        promises = []\n        for tab in self.tabs:\n            promises.append(tab.table.refresh())\n\n        def done():\n            self._refreshing = False\n\n        self._refreshPromise = Promise.all(promises)\n        self._refreshPromise.then(done)\n        self._refreshPromise.catch(done)\n        return self._refreshPromise\n\n    def currentTab(self):\n        \"\"\"\n        Returns the current Tab, or None if not found.\n        \"\"\"\n        active = jQuery(\".menu a.item.active\")\n        data_tab = active.attr(\"data-tab\")\n        for tab in self.tabs:\n            if tab.Data_tab == data_tab:\n                return tab\n        return None\n\n    def searchAll(self):\n        \"\"\"\n        Initiates searching across all tabs based on the current search string.\n        \"\"\"\n        text = jQuery(\"#\" + self._searchId).val()\n        self.searcher.setSearch(text)\n\n        for tab in self.tabs:\n            tab.table.setFilter(self.searcher.search)\n        return False\n\n    def searchCurrent(self):\n        \"\"\"\n        Initiates searching in the current tab based on the current search string.\n        Clears any searches in other tabs.\n        \"\"\"\n        text = jQuery(\"#\" + self._searchId).val()\n        self.searcher.setSearch(text)\n\n        current = self.currentTab()\n\n        # Clear any previous tab's searches and apply current search to current tab\n        for tab in self.tabs:\n            if text and tab.Data_tab == current.Data_tab:\n                tab.table.setFilter(self.searcher.search)\n            else:\n                tab.table.setFilter(None)\n\n    # def searchWithin(self):\n    #     text = jQuery(\"#\" + self._searchId).val()\n\n    def view(self):\n        menu_items = []\n        tab_items = []\n        for tab in self.tabs:\n            menu_items.append(tab.menu_item())\n            tab_items.append(tab.tab_item())\n\n        if self._refreshing:\n            refresher = m(\"button.ui.icon.button.disabled\", {\"onclick\": self.refresh},\n                          m(\"i.refresh.icon.spinning\")\n                          )\n        else:\n            refresher = m(\"button.ui.icon.button\", {\"onclick\": self.refresh},\n                          m(\"i.refresh.icon\")\n                          )\n\n        return m(\"div\", {\"style\": \"height: 100%;\"},\n                 m(\"form\", {\"onsubmit\": self.searchAll},\n                   m(\"div.ui.borderless.menu\",\n                     m(\"div.right.menu\", {\"style\": \"padding-right: 40%\"},\n                       m(\"div.item\", {\"style\": \"width: 80%\"},\n                         m(\"div.ui.transparent.icon.input\",\n                           m(\"input[type=text][placeholder=Search...]\", {\"id\": self._searchId}),\n                           m(\"i.search.icon\")\n                           )\n                         ),\n                       m(\"div.item\",\n                         m(\"input.ui.primary.button[type=submit][value=Search]\")\n                         ),\n                       m(\"div.item\",\n                         refresher\n                         )\n                       # m(\"div.item\",\n                       #   m(\"div.ui.secondary.button\", {\"onclick\": self.searchWithin}, \"Search Within\")\n                       #   )\n                       )\n                     ),\n                   ),\n                 m(\"div.ui.top.attached.pointing.five.item.menu\",\n                   menu_items\n                   ),\n                 tab_items\n                 )\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAIA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AAAA;AAEA;AAIA;AAAA;AAEA;AAIA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAGA;AAAA;AAGA;AA0BA;AAAA;AAAA;AASA;AAQA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAIA;AAAA;AAEA;AAIA;AAAA;AAEA;AAIA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAEA;AAIA;AAEA;AACA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAOA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAKA;AAAA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAKA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAEA;AAIA;AAAA;AAEA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAMA;AAAA;AAAA;AAMA;AACA;AAMA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAMA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAQA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AASA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAQA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AAQA;AACA;AACA;AAAA;AAEA;AASA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAKA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAEA;AAAA;AAEA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAIA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAKA;AACA;AAEA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAGA;AAAA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}