{
	"version": 3,
	"file": "C:/Users/elong/AdHoc/bluepea/src/bluepea/static/pylib/__javascript__/pylib.server.mod.js",
	"sources": [
		"C:/Users/elong/AdHoc/bluepea/src/bluepea/static/pylib/server.py"
	],
	"sourcesContent": [
		"\"\"\"\nHandles interactions with the server endpoints.\n\"\"\"\n\n__pragma__(\"kwargs\")\ndef request(path, **kwargs):\n    \"\"\"\n    Performs a mithril GET request\n\n    Args:\n        path (str): endpoint to access\n        qargs (dict): if provided uses this as path query arguments\n\n    Returns:\n        Promise from m.request\n    \"\"\"\n    path += \"?\"\n    for key, value in kwargs.items():\n        path += key + \"=\" + str(value) + \"&\"\n    path = path[:-1]  # Removed unused & or ?\n    return m.request(path)\n\n\ndef onlyOne(func, interval=1000):\n    \"\"\"\n    Enforces the promise function is called no more than once per span of time (milliseconds).\n    \"\"\"\n    scope = {\"promise\": None, \"lastCalled\": 0}\n\n    def wrap():\n        now = __new__(Date())\n        if scope.promise != None and now - scope.lastCalled < interval:\n            return scope.promise\n\n        scope.lastCalled = now\n\n        def f(resolve, reject):\n            p = func()\n            p.then(resolve)\n            p.catch(reject)\n        scope.promise = __new__(Promise(f))\n        return scope.promise\n    return wrap\n__pragma__(\"nokwargs\")\n\n\ndef clearArray(a):\n    while len(a):\n        a.pop()\n\n\nclass Manager:\n    def __init__(self):\n        self.anonMsgs = AnonMessages()\n        self.entities = Entities()\n\n\nclass Entities:\n    Refresh_Interval = 1000\n    \"\"\"Do not allow refreshing any function more often than this.\"\"\"\n\n    def __init__(self):\n        self.agents = []\n        self.things = []\n        self.issuants = []\n        self.offers = []\n        self.messages = []\n        self.refreshAgents = onlyOne(self._refreshAgents, interval=self.Refresh_Interval)\n        self.refreshThings = onlyOne(self._refreshThings, interval=self.Refresh_Interval)\n        self.refreshIssuants = self.refreshAgents\n        self.refreshOffers = self.refreshThings\n        self.refreshMessages = self.refreshAgents\n\n    def _refreshAgents(self):\n        clearArray(self.agents)\n        clearArray(self.issuants)\n        clearArray(self.messages)\n        return request(\"/agent\", all=True).then(self._parseAllAgents)\n\n    def _parseAllAgents(self, dids):\n        \"\"\"\n        [\n          \"did:igo:3syVH2woCpOvPF0SD9Z0bu_OxNe2ZgxKjTQ961LlMnA=\",\n          \"did:igo:QBRKvLW1CnVDIgznfet3rpad-wZBL4qGASVpGRsE2uU=\",\n          \"did:igo:Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE=\",\n          \"did:igo:Xq5YqaL6L48pf0fu7IUhL0JRaU2_RxFP0AL43wYn148=\",\n          \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\"\n        ]\n        \"\"\"\n        promises = []\n        for did in dids:\n            promises.append(request(\"/agent\", did=did).then(self._parseOneAgent))\n\n            def makeScope(did):\n                return lambda data: self._parseDIDMessages(did, data)\n            promises.append(request(\"/agent/\" + str(did) + \"/drop\", all=True).then(makeScope(did)))\n        return Promise.all(promises)\n\n    def _parseOneAgent(self, data):\n        \"\"\"\n        {\n          \"did\": \"did:igo:3syVH2woCpOvPF0SD9Z0bu_OxNe2ZgxKjTQ961LlMnA=\",\n          \"signer\": \"did:igo:3syVH2woCpOvPF0SD9Z0bu_OxNe2ZgxKjTQ961LlMnA=#0\",\n          \"changed\": \"2000-01-01T00:00:00+00:00\",\n          \"keys\": [\n            {\n              \"key\": \"3syVH2woCpOvPF0SD9Z0bu_OxNe2ZgxKjTQ961LlMnA=\",\n              \"kind\": \"EdDSA\"\n            }\n          ],\n          \"issuants\": [\n            {\n              \"kind\": \"dns\",\n              \"issuer\": \"localhost\",\n              \"registered\": \"2000-01-01T00:00:00+00:00\",\n              \"validationURL\": \"http://localhost:8101/demo/check\"\n            }\n          ]\n        }\n        \"\"\"\n        if data.issuants and len(data.issuants) > 0:\n            for i in data.issuants:\n                # Copy issuant info so we can modify it without affecting the parent agent\n                issuant = jQuery.extend(True, {}, i)\n                issuant.did = data.did\n                self.issuants.append(issuant)\n        self.agents.append(data)\n\n    def _parseDIDMessages(self, did, data):\n        \"\"\"\n        [\n          {\n            \"from\": \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n            \"uid\": \"m_00035d3d94be0000_15aabb5\"\n          }\n        ]\n        \"\"\"\n        promises = []\n        for messagestub in data:\n            promises.append(request(\"/agent/\" + str(did) + \"/drop\", **{\"from\": messagestub[\"from\"], \"uid\": messagestub.uid}).then(self._parseDIDMessage))\n        return Promise.all(promises)\n\n    def _parseDIDMessage(self, data):\n        \"\"\"\n        {\n          \"uid\": \"m_00035d3d94be0000_15aabb5\",\n          \"kind\": \"found\",\n          \"signer\": \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=#0\",\n          \"date\": \"2000-01-04T00:00:00+00:00\",\n          \"to\": \"did:igo:Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE=\",\n          \"from\": \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=\",\n          \"thing\": \"did:igo:4JCM8dJWw_O57vM4kAtTt0yWqSgBuwiHpVgd55BioCM=\",\n          \"subject\": \"Lose something?\",\n          \"content\": \"I am so happy your found it.\"\n        }\n        \"\"\"\n        self.messages.append(data)\n\n    def _refreshThings(self):\n        clearArray(self.things)\n        clearArray(self.offers)\n        return request(\"/thing\", all=True).then(self._parseAllThings)\n\n    def _parseAllThings(self, dids):\n        \"\"\"\n        [\n          \"did:igo:4JCM8dJWw_O57vM4kAtTt0yWqSgBuwiHpVgd55BioCM=\"\n        ]\n        \"\"\"\n        promises = []\n        for did in dids:\n            promises.append(request(\"/thing\", did=did).then(self._parseOneThing))\n\n            def makeScope(did):\n                return lambda data: self._parseDIDOffers(did, data)\n            promises.append(request(\"/thing/\" + str(did) + \"/offer\", all=True).then(makeScope(did)))\n        return Promise.all(promises)\n\n    def _parseOneThing(self, data):\n        \"\"\"\n        {\n          \"did\": \"did:igo:4JCM8dJWw_O57vM4kAtTt0yWqSgBuwiHpVgd55BioCM=\",\n          \"hid\": \"hid:dns:localhost#02\",\n          \"signer\": \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=#0\",\n          \"changed\": \"2000-01-01T00:00:00+00:00\",\n          \"data\": {\n            \"keywords\": [\n              \"Canon\",\n              \"EOS Rebel T6\",\n              \"251440\"\n            ],\n            \"message\": \"If found please return.\"\n          }\n        }\n        \"\"\"\n        self.things.append(data)\n\n    def _parseDIDOffers(self, did, data):\n        \"\"\"\n        [\n          {\n            \"expire\": \"2000-01-01T00:22:00+00:00\",\n            \"uid\": \"o_00035d2976e6a000_26ace93\"\n          },\n          {\n            \"expire\": \"2017-10-05T06:38:03.169027+00:00\",\n            \"uid\": \"o_00035d2976e6a001_26ace99\"\n          }\n        ]\n        \"\"\"\n        promises = []\n        for offerstub in data:\n            promises.append(request(\"/thing/\" + str(did) + \"/offer\", uid=offerstub.uid).then(self._parseDIDOffer))\n        return Promise.all(promises)\n\n    def _parseDIDOffer(self, data):\n        \"\"\"\n        {\n          \"uid\": \"o_00035d2976e6a000_26ace93\",\n          \"thing\": \"did:igo:4JCM8dJWw_O57vM4kAtTt0yWqSgBuwiHpVgd55BioCM=\",\n          \"aspirant\": \"did:igo:Qt27fThWoNZsa88VrTkep6H-4HA8tr54sHON1vWl6FE=\",\n          \"duration\": 120.0,\n          \"expiration\": \"2000-01-01T00:22:00+00:00\",\n          \"signer\": \"did:igo:Xq5YqaL6L48pf0fu7IUhL0JRaU2_RxFP0AL43wYn148=#0\",\n          \"offerer\": \"did:igo:dZ74MLZXD-1QHoa73w9pQ9GroAvxqFi2RTZWlkC0raY=#0\",\n          \"offer\": \"ewogICJ1aWQiOiAib18wMDAzNWQyOTc2ZTZhMDAwXzI2YWNlOTMiLAogICJ...\"\n        }\n        \"\"\"\n        self.offers.append(data)\n\n\nclass AnonMessages:\n    Refresh_Interval = Entities.Refresh_Interval\n\n    def __init__(self):\n        self.messages = []\n        self.refresh = onlyOne(self._refresh, interval=self.Refresh_Interval)\n\n    def _refresh(self):\n        clearArray(self.messages)\n        return request(\"/anon\", all=True).then(self._parseAll)\n\n    def _parseAll(self, uids):\n        \"\"\"\n        [\n          \"AQIDBAoLDA0=\",\n          \"BBIDBAoLCCC=\"\n        ]\n        \"\"\"\n        promises = []\n        for uid in uids:\n            promises.append(request(\"/anon\", uid=uid).then(self._parseOne))\n        return Promise.all(promises)\n\n    def _parseOne(self, messages):\n        \"\"\"\n        [\n          {\n            \"create\": 1507303692490959,\n            \"expire\": 1507390092490959,\n            \"anon\": {\n              \"uid\": \"BBIDBAoLCCC=\",\n              \"content\": \"EjRWeBI0Vng=\",\n              \"date\": \"2017-10-06T15:28:17.490959+00:00\"\n            }\n          }\n        ]\n        \"\"\"\n        for message in messages:\n            self.messages.append(message)\n\n\nmanager = Manager()\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAUA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAsBA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AASA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAiBA;AAAA;AAEA;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAaA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}